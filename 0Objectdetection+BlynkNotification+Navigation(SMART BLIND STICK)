// Final ESP32-CAM Code with Object Detection, Blynk IoT, DFPlayer Mini Audio, and SD Card Logging

#include <WiFi.h>
#include <BlynkSimpleEsp32.h>
#include <DFRobotDFPlayerMini.h>
#include <SoftwareSerial.h>
#include <FS.h>
#include <SD_MMC.h>
#include <esp_camera.h>

// Replace with your network credentials
char ssid[] = "YOUR_WIFI_SSID";
char pass[] = "YOUR_WIFI_PASSWORD";
char auth[] = "YOUR_BLYNK_AUTH_TOKEN"; // From Blynk IoT

// DFPlayer Serial
SoftwareSerial dfSerial(2, 3); // RX, TX
DFRobotDFPlayerMini dfplayer;

// Camera configuration
#define PWDN_GPIO_NUM     -1
#define RESET_GPIO_NUM    -1
#define XCLK_GPIO_NUM      0
#define SIOD_GPIO_NUM     26
#define SIOC_GPIO_NUM     27

#define Y9_GPIO_NUM       35
#define Y8_GPIO_NUM       34
#define Y7_GPIO_NUM       39
#define Y6_GPIO_NUM       36
#define Y5_GPIO_NUM       21
#define Y4_GPIO_NUM       19
#define Y3_GPIO_NUM       18
#define Y2_GPIO_NUM        5
#define VSYNC_GPIO_NUM    25
#define HREF_GPIO_NUM     23
#define PCLK_GPIO_NUM     22

void startCameraServer();

void setup() {
  Serial.begin(115200);

  // Initialize DFPlayer
  dfSerial.begin(9600);
  if (!dfplayer.begin(dfSerial)) {
    Serial.println("DFPlayer Mini not detected");
  } else {
    Serial.println("DFPlayer ready");
    dfplayer.volume(20); // Set volume (0–30)
  }

  // Connect to Wi-Fi and Blynk
  WiFi.begin(ssid, pass);
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println("WiFi connected");
  Blynk.begin(auth, ssid, pass);

  // Initialize Camera
  camera_config_t config;
  config.ledc_channel = LEDC_CHANNEL_0;
  config.ledc_timer = LEDC_TIMER_0;
  config.pin_d0 = Y2_GPIO_NUM;
  config.pin_d1 = Y3_GPIO_NUM;
  config.pin_d2 = Y4_GPIO_NUM;
  config.pin_d3 = Y5_GPIO_NUM;
  config.pin_d4 = Y6_GPIO_NUM;
  config.pin_d5 = Y7_GPIO_NUM;
  config.pin_d6 = Y8_GPIO_NUM;
  config.pin_d7 = Y9_GPIO_NUM;
  config.pin_xclk = XCLK_GPIO_NUM;
  config.pin_pclk = PCLK_GPIO_NUM;
  config.pin_vsync = VSYNC_GPIO_NUM;
  config.pin_href = HREF_GPIO_NUM;
  config.pin_sscb_sda = SIOD_GPIO_NUM;
  config.pin_sscb_scl = SIOC_GPIO_NUM;
  config.pin_pwdn = PWDN_GPIO_NUM;
  config.pin_reset = RESET_GPIO_NUM;
  config.xclk_freq_hz = 20000000;
  config.pixel_format = PIXFORMAT_JPEG;

  if(psramFound()){
    config.frame_size = FRAMESIZE_QVGA;
    config.jpeg_quality = 10;
    config.fb_count = 2;
  } else {
    config.frame_size = FRAMESIZE_CIF;
    config.jpeg_quality = 12;
    config.fb_count = 1;
  }

  // Camera init
  esp_err_t err = esp_camera_init(&config);
  if (err != ESP_OK) {
    Serial.printf("Camera init failed with error 0x%x", err);
    return;
  }

  // Start SD Card
  if (!SD_MMC.begin()) {
    Serial.println("SD Card Mount Failed");
    return;
  }

  startCameraServer();
  Serial.println("Camera ready!");
}

void loop() {
  Blynk.run();
  detectObjectAndAct();
}

void detectObjectAndAct() {
  // Placeholder for AI detection, insert your TensorFlow or API call logic here.
  // For demo, let’s assume we detect a "chair"
  String detected = "chair";

  // Save photo to SD
  camera_fb_t * fb = esp_camera_fb_get();
  if (!fb) {
    Serial.println("Camera capture failed");
    return;
  }

  File file = SD_MMC.open("/obstacle.jpg", FILE_WRITE);
  if (!file) {
    Serial.println("Failed to open file in writing mode");
  } else {
    file.write(fb->buf, fb->len);
    Serial.println("Image saved to SD");
  }
  file.close();
  esp_camera_fb_return(fb);

  // Notify via Blynk
  String msg = "Obstacle Detected: " + detected;
  Blynk.logEvent("obstacle_alert", msg);

  // Play voice message via DFPlayer
  if (detected == "chair") {
    dfplayer.play(1); // Play chair audio (e.g. 0001.mp3)
  } else if (detected == "bench") {
    dfplayer.play(2);
  } else if (detected == "human") {
    dfplayer.play(3);
  } else {
    dfplayer.play(4); // default alert
  }
}

void startCameraServer() {
  // Optional: set up MJPEG streaming server if needed
}
